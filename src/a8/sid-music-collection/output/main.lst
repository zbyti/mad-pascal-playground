mads 2.1.5
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 2000				RCDATA 'music/london_demo.apl' MUSIC_APL_LONDON 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 05E1			len = .filesize('music/london_demo.apl')-0
    28 					org main.MUSIC_APL_LONDON
    30 FFFF> 4300-48E0> 78 03 + 	ins 'music/london_demo.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_LONDON,'..',*-1," 'music/london_demo.apl'"
    32 				$R RCDATA  $4300..$48E0 'music/london_demo.apl'
Source: main.a65
   110 48E1				RCDATA 'music/audio_art.apl' MUSIC_APL_ART 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 079E			len = .filesize('music/audio_art.apl')-0
    28 48E1				org main.MUSIC_APL_ART
    30 4900-509D> 78 03 20 48 + 	ins 'music/audio_art.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_ART,'..',*-1," 'music/audio_art.apl'"
    32 				$R RCDATA  $4900..$509D 'music/audio_art.apl'
Source: main.a65
   111 509E				RCDATA 'music/batmania_ii_5.apl' MUSIC_APL_BATMANIA 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0699			len = .filesize('music/batmania_ii_5.apl')-0
    28 509E				org main.MUSIC_APL_BATMANIA
    30 5100-5798> 4D 00 55 53 + 	ins 'music/batmania_ii_5.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_BATMANIA,'..',*-1," 'music/batmania_ii_5.apl'"
    32 				$R RCDATA  $5100..$5798 'music/batmania_ii_5.apl'
Source: main.a65
   112 5799				RCDATA 'music/contaxia.apl' MUSIC_APL_CONTAXIA 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0789			len = .filesize('music/contaxia.apl')-0
    28 5799				org main.MUSIC_APL_CONTAXIA
    30 5800-5F88> 78 03 20 48 + 	ins 'music/contaxia.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_CONTAXIA,'..',*-1," 'music/contaxia.apl'"
    32 				$R RCDATA  $5800..$5F88 'music/contaxia.apl'
Source: main.a65
   113 5F89				RCDATA 'music/domination.apl' MUSIC_APL_DOMINATION 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 08C3			len = .filesize('music/domination.apl')-0
    28 5F89				org main.MUSIC_APL_DOMINATION
    30 6000-68C2> 78 03 20 48 + 	ins 'music/domination.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_DOMINATION,'..',*-1," 'music/domination.apl'"
    32 				$R RCDATA  $6000..$68C2 'music/domination.apl'
Source: main.a65
   114 68C3				RCDATA 'music/funcie.apl' MUSIC_APL_FUNCIE 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 08C6			len = .filesize('music/funcie.apl')-0
    28 68C3				org main.MUSIC_APL_FUNCIE
    30 6900-71C5> 78 03 20 48 + 	ins 'music/funcie.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_FUNCIE,'..',*-1," 'music/funcie.apl'"
    32 				$R RCDATA  $6900..$71C5 'music/funcie.apl'
Source: main.a65
   115 71C6				RCDATA 'music/in_chance.apl' MUSIC_APL_CHANCE 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0707			len = .filesize('music/in_chance.apl')-0
    28 71C6				org main.MUSIC_APL_CHANCE
    30 7200-7906> 78 03 20 48 + 	ins 'music/in_chance.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_CHANCE,'..',*-1," 'music/in_chance.apl'"
    32 				$R RCDATA  $7200..$7906 'music/in_chance.apl'
Source: main.a65
   116 7907				RCDATA 'music/lessons_in_love.apl' MUSIC_APL_LOVE 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0751			len = .filesize('music/lessons_in_love.apl')-0
    28 7907				org main.MUSIC_APL_LOVE
    30 7A00-8150> 78 03 20 48 + 	ins 'music/lessons_in_love.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_LOVE,'..',*-1," 'music/lessons_in_love.apl'"
    32 				$R RCDATA  $7A00..$8150 'music/lessons_in_love.apl'
Source: main.a65
   117 8151				RCDATA 'music/peppered_pizza.apl' MUSIC_APL_PIZZA 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 07DC			len = .filesize('music/peppered_pizza.apl')-0
    28 8151				org main.MUSIC_APL_PIZZA
    30 8200-89DB> 78 03 20 48 + 	ins 'music/peppered_pizza.apl',0
    32 					.print '$R RCDATA  ',main.MUSIC_APL_PIZZA,'..',*-1," 'music/peppered_pizza.apl'"
    32 				$R RCDATA  $8200..$89DB 'music/peppered_pizza.apl'
Source: main.a65
   118 				.endl
   119
   120 				; ------------------------------------------------------------
   121
   122 89DC				org CODEORIGIN
   123
   124 2000				STATICDATA
Macro: STATICDATA [Source: main.a65]
     1 2000-251E> 0F 4C 6F 6E + .by  $0F $4C $6F $6E $64 $6F $6E $20  $44 $65 $6D $6F $20 $20 $20 $20  $00 $0F $42 $61 $74 $6D $61 $6E
     2 2018 69 61 20 49 49 20 + .by  $69 $61 $20 $49 $49 $20 $35 $20  $20 $00 $0F $41 $75 $64 $69 $6F  $20 $41 $72 $74 $20 $20 $20 $20
     3 2030 20 20 00 0F 43 6F + .by  $20 $20 $00 $0F $43 $6F $6E $74  $61 $78 $69 $61 $20 $20 $20 $20  $20 $20 $20 $00 $0F $44 $6F $6D
     4 2048 69 6E 61 74 69 6F + .by  $69 $6E $61 $74 $69 $6F $6E $20  $20 $20 $20 $20 $00 $0F $46 $75  $6E $63 $69 $65 $20 $20 $20 $20
     5 2060 20 20 20 20 20 00 + .by  $20 $20 $20 $20 $20 $00 $0F $49  $6E $20 $43 $68 $61 $6E $63 $65  $20 $20 $20 $20 $20 $20 $00 $0F
     6 2078 4C 65 73 73 6F 6E + .by  $4C $65 $73 $73 $6F $6E $73 $20  $69 $6E $20 $4C $6F $76 $65 $00  $0F $50 $65 $70 $70 $65 $72 $65
     7 2090 64 20 50 69 7A 7A + .by  $64 $20 $50 $69 $7A $7A $61 $20  $00 $03 $4E $6F $2E $00 $16 $45  $78 $70 $65 $63 $74 $69 $6E $67
     8 20A8 20 53 49 44 20 6F + .by  $20 $53 $49 $44 $20 $6F $6E $20  $24 $64 $35 $30 $30 $00 $18 $43  $6F $6D $70 $6F $73 $65 $72 $20
     9 20C0 3A 20 52 65 79 6E + .by  $3A $20 $52 $65 $79 $6E $20 $4F  $75 $77 $65 $68 $61 $6E $64 $00  $1A $50 $6C $61 $79 $65 $72 $20
    10 20D8 20 20 3A 20 4D 75 + .by  $20 $20 $3A $20 $4D $75 $73 $69  $63 $20 $41 $73 $73 $65 $6D $62  $6C $65 $72 $00 $0E $70 $72 $65
    11 20F0 73 73 20 73 70 61 + .by  $73 $73 $20 $73 $70 $61 $63 $65  $2E $2E $2E $00 $04 $42 $59 $45  $21 $00 $00 $20 $11 $20 $22 $20
    12 2108 33 20 44 20 55 20 + .by  $33 $20 $44 $20 $55 $20 $66 $20  $77 $20 $88 $20 $00 $43 $00 $51  $00 $49 $00 $58 $00 $60 $00 $69
    13 2120 00 72 00 7A 00 82	.by  $00 $72 $00 $7A $00 $82
Source: main.a65
   125
   126 				; ------------------------------------------------------------
   127
   128 2126			RTLIB
   129 2126				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   130
   131 				.print 'ZPAGE: ',zpage,'..',zpend-1
   131 				ZPAGE: $0080..$00D3
   132
   133 				.print 'RTLIB: ',RTLIB,'..',*-1
   133 				RTLIB: $2126..$225E
   134
   135 				; ------------------------------------------------------------
   136
   137 225F			START
   138 225F BA				tsx
   139 2260 8E 06 25			stx MAIN.@halt+1
   140
   141 					.ifdef fmulinit
   142 					fmulinit
   143 					.fi
   144
   145 = 000F			VLEN	= VARDATASIZE-VARINITSIZE
   146 = 2526			VADR	= DATAORIGIN+VARINITSIZE
   147
   148 					ift VADR > $BFFF
   149 					ert 'Invalid memory address range ',VADR
   150 					eli (VLEN>0) && (VLEN<=256)
   151 2263 A2 F1			ldx #256-VLEN
   152 2265 A9 00			lda #$00
   153 2267 9D 35 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   154 					eli VLEN>256
   155 					@fill #VADR #VLEN #$00
   156 					eif
   157
   158 				.ifdef :psptr
   159 					mwa #PROGRAMSTACK :psptr
   160 				.fi
   161
   162 					.ifdef MAIN.@DEFINES.ROMOFF
   163 					icl 'atari\romoff.asm'
   164 					.fi
   165
   166 226D A2 0F			ldx #$0F					; DOS II+/D ParamStr
   167 226F BD 40 03 9D 0B 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   168
   169 2278 E8				inx						; X = 0
   170 2279 86 80			stx bp						; BP = 0
   171
   172 227B 8E 0F D2			stx skctl					; reset POKEY
   173 227E A9 03			lda #3
   174 2280 8D 0F D2			sta skctl
   175
   176 2283 CA				dex						; X = 255
   177
   178 2284				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: main.a65]
   179
   180 2284			.local	MAIN						; PROCEDURE
   181
   182 2284 4C B4 24			jmp l_0109
   183
   184 				; ------------------------------------------------------------
   185
   186 2287			.local	SYSTEM						; UNIT
   187
   188 2287			.local	FILLBYTE_0145					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   189
   190 					.MACRO m@INLINE
   191 				
   192 				; -------------------  ASM Block 00000026  -------------------
   193 				
   194 					jsr @fill
   195 				
   196 					.ENDM
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= :EDX
   201 = 008C			COUNT	= :ECX
   202 = 0084			VALUE	= :EAX
   203 2287			@exit
   204 				.endl
   205
   206 2287			.local	PAUSE_0164					; PROCEDURE | ASSEMBLER | OVERLOAD
   207
   208 				; -------------------  ASM Block 00000037  -------------------
   209
   210
   211 2287 AD 2B 25		loop	lda n
   212 228A 0D 2C 25			ora n+1
   213 228D F0 14			beq stop
   214
   215 228F A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   216
   217 2295 AD 2B 25 D0 03 CE + 	dew n
   218
   219 22A0 4C 87 22			jmp loop
   220 22A3			stop
   221
   222
   223 				; ------------------------------------------------------------
   224
   225 = 252B			N	= DATAORIGIN+$000B
   226
   227 = 252B			@VarData	= N
   228 = 0002			@VarDataSize	= 2
   229
   230 22A3			@exit
   231 					.ifdef @new
   232 					lda <@VarData
   233 					sta :ztmp
   234 					lda >@VarData
   235 					ldy #@VarDataSize-1
   236 					jmp @FreeMem
   237 					els
   238 22A3 60				rts						; ret
   239 					eif
   240 				.endl
   241
   242 				; ------------------------------------------------------------
   243
   244 = 0101			__PORTB_BANKS	= $0101
   245 = 0648			M_PI_2	= $0648
   246 = 0192			D_PI_2	= $0192
   247 = 0004			D_PI_180	= $04
   248 = 0000			MGTIA	= $00
   249 = 0080			MVBXE	= $80
   250 = 0000			VBXE_XDLADR	= $00
   251 = 0100			VBXE_BCBADR	= $0100
   252 = 1000			VBXE_MAPADR	= $1000
   253 = 1000			VBXE_CHBASE	= $1000
   254 = 5000			VBXE_OVRADR	= $5000
   255 = B000			VBXE_WINDOW	= $B000
   256 = 0000			IDLI	= $00
   257 = 0001			IVBL	= $01
   258 = 0002			ITIM1	= $02
   259 = 0003			ITIM2	= $03
   260 = 0004			ITIM4	= $04
   261 = 00FE			CH_DELCHR	= $FE
   262 = 009B			CH_ENTER	= $9B
   263 = 001B			CH_ESC	= $1B
   264 = 001C			CH_CURS_UP	= $1C
   265 = 001D			CH_CURS_DOWN	= $1D
   266 = 001E			CH_CURS_LEFT	= $1E
   267 = 001F			CH_CURS_RIGHT	= $1F
   268 = 007F			CH_TAB	= $7F
   269 = 009B			CH_EOL	= $9B
   270 = 007D			CH_CLR	= $7D
   271 = 00FD			CH_BELL	= $FD
   272 = 007E			CH_DEL	= $7E
   273 = 009C			CH_DELLINE	= $9C
   274 = 009D			CH_INSLINE	= $9D
   275 = 0000			COLOR_BLACK	= $00
   276 = 000E			COLOR_WHITE	= $0E
   277 = 0032			COLOR_RED	= $32
   278 = 0096			COLOR_CYAN	= $96
   279 = 0068			COLOR_VIOLET	= $68
   280 = 00C4			COLOR_GREEN	= $C4
   281 = 0074			COLOR_BLUE	= $74
   282 = 00EE			COLOR_YELLOW	= $EE
   283 = 0028			COLOR_ORANGE	= $28
   284 = 00E4			COLOR_BROWN	= $E4
   285 = 003C			COLOR_LIGHTRED	= $3C
   286 = 0004			COLOR_GRAY1	= $04
   287 = 0006			COLOR_GRAY2	= $06
   288 = 000A			COLOR_GRAY3	= $0A
   289 = 00CC			COLOR_LIGHTGREEN	= $CC
   290 = 007C			COLOR_LIGHTBLUE	= $7C
   291 = 0004			FMOPENREAD	= $04
   292 = 0008			FMOPENWRITE	= $08
   293 = 0009			FMOPENAPPEND	= $09
   294 = 000C			FMOPENREADWRITE	= $0C
   295 = 2520			SCREENWIDTH	= DATAORIGIN+$0000
   296 = 2522			SCREENHEIGHT	= DATAORIGIN+$0002
   297 = 2524			DATESEPARATOR	= DATAORIGIN+$0004
   298 = D20A			RND	= $D20A
   299 = 02C0			adr.PALETTE	= $02C0
   300 22A4			.var PALETTE	= adr.PALETTE .word
   301 = D012			adr.HPALETTE	= $D012
   302 22A4			.var HPALETTE	= adr.HPALETTE .word
   303 = 2525			FILEMODE	= DATAORIGIN+$0005
   304 = 2526			GRAPHMODE	= DATAORIGIN+$0006
   305 = 2527			IORESULT	= DATAORIGIN+$0007
   306 = 2528			EOLN	= DATAORIGIN+$0008
   307 = 2529			RNDSEED	= DATAORIGIN+$0009
   308
   309 = 22A4 C0 02		PALETTE
   309 = 22A6 12 D0		HPALETTE
   309 				.endl							; UNIT SYSTEM
   310
   311 				; ------------------------------------------------------------
   312
   313 22A8			.local	ATARI						; UNIT
   314
   315 				; ------------------------------------------------------------
   316
   317 = 0010			IRQENS	= $10
   318 = 0012			RTCLOK	= $12
   319 = 0012			RTCLOK1	= $12
   320 = 0013			RTCLOK2	= $13
   321 = 0014			RTCLOK3	= $14
   322 = 004D			ATRACT	= $4D
   323 = 0052			LMARGIN	= $52
   324 = 0053			RMARGIN	= $53
   325 = 0054			ROWCRS	= $54
   326 = 0055			COLCRS	= $55
   327 = 0057			DINDEX	= $57
   328 = 0058			SAVMSC	= $58
   329 = 0062			PALNTS	= $62
   330 = 006A			RAMTOP	= $6A
   331 = 0200			VDSLST	= $0200
   332 = 0230			SDLSTL	= $0230
   333 = 0290			TXTROW	= $0290
   334 = 0291			TXTCOL	= $0291
   335 = 0293			TINDEX	= $0293
   336 = 0294			TXTMSC	= $0294
   337 = 022F			SDMCTL	= $022F
   338 = 026F			GPRIOR	= $026F
   339 = 02F0			CRSINH	= $02F0
   340 = 02F3			CHACT	= $02F3
   341 = 02F4			CHBAS	= $02F4
   342 = 02FC			CH	= $02FC
   343 = 02C0			PCOLR0	= $02C0
   344 = 02C1			PCOLR1	= $02C1
   345 = 02C2			PCOLR2	= $02C2
   346 = 02C3			PCOLR3	= $02C3
   347 = 02C4			COLOR0	= $02C4
   348 = 02C5			COLOR1	= $02C5
   349 = 02C6			COLOR2	= $02C6
   350 = 02C7			COLOR3	= $02C7
   351 = 02C8			COLOR4	= $02C8
   352 = 02C8			COLBAKS	= $02C8
   353 = D000			HPOSP0	= $D000
   354 = D001			HPOSP1	= $D001
   355 = D002			HPOSP2	= $D002
   356 = D003			HPOSP3	= $D003
   357 = D004			HPOSM0	= $D004
   358 = D005			HPOSM1	= $D005
   359 = D006			HPOSM2	= $D006
   360 = D007			HPOSM3	= $D007
   361 = D008			SIZEP0	= $D008
   362 = D009			SIZEP1	= $D009
   363 = D00A			SIZEP2	= $D00A
   364 = D00B			SIZEP3	= $D00B
   365 = D00C			SIZEM	= $D00C
   366 = D00D			GRAFP0	= $D00D
   367 = D00E			GRAFP1	= $D00E
   368 = D00F			GRAFP2	= $D00F
   369 = D010			GRAFP3	= $D010
   370 = D011			GRAFM	= $D011
   371 = D004			P0PF	= $D004
   372 = D014			PAL	= $D014
   373 = D012			COLPM0	= $D012
   374 = D013			COLPM1	= $D013
   375 = D014			COLPM2	= $D014
   376 = D015			COLPM3	= $D015
   377 = D016			COLPF0	= $D016
   378 = D017			COLPF1	= $D017
   379 = D018			COLPF2	= $D018
   380 = D019			COLPF3	= $D019
   381 = D01A			COLBK	= $D01A
   382 = D01B			PRIOR	= $D01B
   383 = D01D			GRACTL	= $D01D
   384 = D01E			HITCLR	= $D01E
   385 = D01F			CONSOL	= $D01F
   386 = D200			AUDF1	= $D200
   387 = D201			AUDC1	= $D201
   388 = D202			AUDF2	= $D202
   389 = D203			AUDC2	= $D203
   390 = D204			AUDF3	= $D204
   391 = D205			AUDC3	= $D205
   392 = D206			AUDF4	= $D206
   393 = D207			AUDC4	= $D207
   394 = D208			AUDCTL	= $D208
   395 = D209			KBCODE	= $D209
   396 = D20E			IRQEN	= $D20E
   397 = D20F			SKSTAT	= $D20F
   398 = D300			PORTA	= $D300
   399 = D301			PORTB	= $D301
   400 = D400			DMACTL	= $D400
   401 = D401			CHACTL	= $D401
   402 = D402			DLISTL	= $D402
   403 = D404			HSCROL	= $D404
   404 = D405			VSCROL	= $D405
   405 = D407			PMBASE	= $D407
   406 = D409			CHBASE	= $D409
   407 = D40A			WSYNC	= $D40A
   408 = D40B			VCOUNT	= $D40B
   409 = D40C			PENH	= $D40C
   410 = D40D			PENV	= $D40D
   411 = D40E			NMIEN	= $D40E
   412 = FFFA			NMIVEC	= $FFFA
   413 = FFFC			RESETVEC	= $FFFC
   414 = FFFE			IRQVEC	= $FFFE
   415
   416 				.endl							; UNIT ATARI
   417
   418 				; ------------------------------------------------------------
   419
   420 22A8			.local	APLIB						; UNIT
   421
   422 22A8			.local	UNAPL_0171					; PROCEDURE | ASSEMBLER | OVERLOAD
   423
   424 				; -------------------  ASM Block 00000053  -------------------
   425
   426 22A8 8E F3 22				stx @sp
   427
   428 22AB AD 2D 25 8D CC 23 + 		mwa inputPointer	GET_BYTE+1
   429 22B7 AD 2F 25 8D 8C 23 + 		mwa outputPointer	dest_ap
   430
   431 22C3 A9 80		aPL_depack	lda #$80
   432 22C5 8D 7D 23				sta token
   433 22C8 4E 16 23		literal		lsr bl
   434 22CB 20 CB 23				jsr GET_BYTE
   435 22CE 20 8B 23		write		jsr store
   436 22D1 20 7C 23		nxt_token	jsr get_token_bit
   437 22D4 90 F2				bcc literal		; literal  -> 0
   438 22D6 20 7C 23				jsr get_token_bit
   439 22D9 90 36				bcc block		; block    -> 10
   440 22DB 20 7C 23				jsr get_token_bit
   441 22DE 90 17				bcc short_block		; short block -> 110
   442
   443 22E0 4E 16 23		single_byte	lsr bl			; single byte -> 111
   444 22E3 A9 10				lda #$10
   445 22E5 48			@		pha
   446 22E6 20 7C 23				jsr get_token_bit
   447 22E9 68					pla
   448 22EA 2A					rol @
   449 22EB 90 F8				bcc @-
   450 22ED F0 DF				beq write
   451 22EF 4C 97 23				jmp len01
   452
   453 22F2 A2 00		aPL_done	ldx #0
   454 = 22F3			@sp		equ *-1
   455
   456 22F4 4C D7 23				jmp @exit
   457
   458 22F7 20 CB 23		short_block	jsr GET_BYTE
   459 22FA 4A					lsr @
   460 22FB F0 F5				beq aPL_done
   461 22FD 8D 20 23				sta EBPL
   462 2300 A2 00				ldx #0
   463 2302 8E 25 23				stx EBPH
   464 2305 A2 02				ldx #$02
   465 2307 90 01				bcc @+
   466 2309 E8					inx
   467 230A 38			@		sec
   468 230B 6E 16 23				ror  bl
   469 230E 4C 99 23				jmp len0203
   470
   471 2311 20 62 23		block		jsr getgamma
   472 2314 CA					dex
   473 2315 A9 FF				lda #$ff
   474 = 2316			bl		equ *-1
   475 2317 30 13				bmi normalcodepair
   476 2319 CA					dex
   477 231A D0 10				bne normalcodepair
   478 231C 20 62 23				jsr getgamma
   479 231F A9 FF				lda #$ff
   480 = 2320			EBPL		equ *-1
   481 2321 8D A8 23				sta offsetL
   482 2324 A9 FF				lda #$ff
   483 = 2325			EBPH		equ *-1
   484 2326 8D B0 23				sta offsetH
   485 2329 4C 5B 23				jmp lenffff
   486
   487 232C CA			normalcodepair	dex
   488 232D 8E B0 23				stx offsetH
   489 2330 8E 25 23				stx EBPH
   490 2333 20 CB 23				jsr GET_BYTE
   491 2336 8D A8 23				sta offsetL
   492 2339 8D 20 23				sta EBPL
   493 233C 20 62 23				jsr getgamma
   494 233F AD B0 23				lda offsetH
   495 2342 F0 0A				beq _ceck7f
   496 2344 C9 7D				cmp #$7d
   497 2346 B0 0B				bcs  plus2
   498 2348 C9 05				cmp #$05
   499 234A B0 0B				bcs  plus1
   500 234C 90 0D				bcc normal1	; zawsze
   501 234E AD A8 23		_ceck7f		lda offsetL
   502 2351 30 08				bmi normal1
   503 2353 E8			plus2		inx
   504 2354 D0 01				bne plus1
   505 2356 C8					iny
   506 2357 E8			plus1		inx
   507 2358 D0 01				bne normal1
   508 235A C8					iny
   509 235B			normal1
   510 235B C8			lenffff		iny
   511 235C 38					sec
   512 235D 6E 16 23				ror bl
   513 2360 D0 41				bne domatch	; zawsze
   514
   515 2362 A9 00		getgamma	lda #$00
   516 2364 48					pha
   517 2365 A9 01				lda #$01
   518 2367 48					pha
   519 2368 20 7C 23		@		jsr get_token_bit
   520 236B BA					tsx
   521 236C 3E 01 01				rol $101,x
   522 236F 3E 02 01				rol $102,x
   523 2372 20 7C 23				jsr get_token_bit
   524 2375 B0 F1				bcs @-
   525 2377 68					pla
   526 2378 AA					tax
   527 2379 68					pla
   528 237A A8					tay
   529 237B 60					rts
   530
   531 237C A9 FF		get_token_bit	lda #$ff
   532 = 237D			token		equ *-1
   533 237E 0A					asl @
   534 237F D0 06				bne @+
   535 2381 08					php
   536 2382 20 CB 23				jsr GET_BYTE
   537 2385 28					plp
   538 2386 2A					rol @
   539 2387 8D 7D 23		@		sta token
   540 238A 60					rts
   541
   542 238B 8D FF FF		store		sta $ffff
   543 = 238C			dest_ap		equ *-2
   544 238E EE 8C 23 D0 03 EE + 		inw dest_ap
   545 2396 60					rts
   546
   547 2397 A2 01		len01		ldx #$01
   548 2399 A0 01		len0203		ldy #$01
   549 239B 8D A8 23				sta offsetL
   550 239E A9 00				lda #0
   551 23A0 8D B0 23				sta offsetH
   552
   553 23A3 AD 8C 23		domatch		lda dest_ap
   554 23A6 38					sec
   555 23A7 E9 FF				sbc #$ff
   556 = 23A8			offsetL		equ *-1
   557 23A9 8D B5 23				sta src
   558 23AC AD 8D 23				lda dest_ap+1
   559 23AF E9 FF				sbc #$ff
   560 = 23B0			offsetH		equ *-1
   561 23B1 8D B6 23				sta src+1
   562 23B4 AD FF FF		source		lda $ffff
   563 = 23B5			src		equ *-2
   564 23B7 EE B5 23 D0 03 EE + 		inw src
   565 23BF 20 8B 23				jsr store
   566 23C2 CA					dex
   567 23C3 D0 EF				bne source
   568 23C5 88					dey
   569 23C6 D0 EC				bne source
   570 23C8 4C D1 22				jmp nxt_token
   571
   572
   573 23CB AD FF FF		GET_BYTE	lda $ffff
   574 23CE EE CC 23 D0 03 EE + 		inw GET_BYTE+1
   575 23D6 60					rts
   576
   577 				; ------------------------------------------------------------
   578
   579 = 252D			INPUTPOINTER	= DATAORIGIN+$000D
   580 = 252F			OUTPUTPOINTER	= DATAORIGIN+$000F
   581
   582 = 252D			@VarData	= INPUTPOINTER
   583 = 0004			@VarDataSize	= 4
   584
   585 23D7			@exit
   586 					.ifdef @new
   587 					lda <@VarData
   588 					sta :ztmp
   589 					lda >@VarData
   590 					ldy #@VarDataSize-1
   591 					jmp @FreeMem
   592 					els
   593 23D7 60				rts						; ret
   594 					eif
   595 				.endl
   596
   597 				; ------------------------------------------------------------
   598
   599 				.endl							; UNIT APLIB
   600
   601 				; ------------------------------------------------------------
   602
   603 23D8			.local	CRT						; UNIT
   604
   605 23D8			.local	CLRSCR						; PROCEDURE
   606
   607 				; optimize FAIL ('@print', crt_atari.inc), line = 34
   608
   609 					@print #$7D
   609 				 LDY# $7D\ JSR @PRINT
   609 23D8 A0 7D		 LDY# $7D
   609 23DA 20 96 21		 JSR @PRINT
   610 23DD			@exit
   611 					.ifdef @new
   612 					lda <@VarData
   613 					sta :ztmp
   614 					lda >@VarData
   615 					ldy #@VarDataSize-1
   616 					jmp @FreeMem
   617 					els
   618 23DD 60				rts						; ret
   619 					eif
   620 				.endl
   621
   622 23DE			.local	READKEY						; FUNCTION | ASSEMBLER
   623
   624 				; -------------------  ASM Block 00000054  -------------------
   625
   626 23DE				m@call @GetKey
Macro: M@CALL [Source: macros.asm]
    12 23DE 20 26 21				jsr @GETKEY
Source: main.a65
   627 23E1 8D 32 25			sta Result
   628
   629 23E4			@exit
   630
   631 				; ------------------------------------------------------------
   632
   633 = 2532			RESULT	= DATAORIGIN+$0012
   634
   635 = 2532			@VarData	= RESULT
   636 = 0001			@VarDataSize	= 1
   637
   638 23E4 60				rts						; ret
   639 				.endl
   640
   641 23E5			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   642
   643 				; -------------------  ASM Block 00000058  -------------------
   644
   645 23E5 A0 00			ldy #$00	; false
   646 23E7 AD FC 02			lda kbcodes
   647 23EA C9 FF			cmp #$ff
   648 23EC F0 01			seq
   649 23EE C8				iny		; true
   650 23EF 8C 33 25			sty Result
   651
   652 23F2			@exit
   653
   654 				; ------------------------------------------------------------
   655
   656 = 2533			RESULT	= DATAORIGIN+$0013
   657
   658 = 2533			@VarData	= RESULT
   659 = 0001			@VarDataSize	= 1
   660
   661 23F2 60				rts						; ret
   662 				.endl
   663
   664 				; ------------------------------------------------------------
   665
   666 = 2531			TEXTATTR	= DATAORIGIN+$0011
   667 = D01F			CONSOL	= $D01F
   668 = 0000			CN_START_SELECT_OPTION	= $00
   669 = 0001			CN_SELECT_OPTION	= $01
   670 = 0002			CN_START_OPTION	= $02
   671 = 0003			CN_OPTION	= $03
   672 = 0004			CN_START_SELECT	= $04
   673 = 0005			CN_SELECT	= $05
   674 = 0006			CN_START	= $06
   675 = 0007			CN_NONE	= $07
   676 = 0000			BW40	= $00
   677 = 0001			CO40	= $01
   678 = 0002			BW80	= $02
   679 = 0003			CO80	= $03
   680 = 0007			MONO	= $07
   681 = 0001			C40	= $01
   682 = 0003			C80	= $03
   683 = 0000			BLACK	= $00
   684 = 000F			WHITE	= $0F
   685 = 0026			RED	= $26
   686 = 00AC			CYAN	= $AC
   687 = 0048			PURPLE	= $48
   688 = 00B6			GREEN	= $B6
   689 = 0086			BLUE	= $86
   690 = 00DC			YELLOW	= $DC
   691 = 0018			ORANGE	= $18
   692 = 00F4			BROWN	= $F4
   693 = 002A			LIGHT_RED	= $2A
   694 = 0004			DARK_GREY	= $04
   695 = 0008			GREY	= $08
   696 = 00BC			LIGHT_GREEN	= $BC
   697 = 009A			LIGHT_BLUE	= $9A
   698 = 000C			LIGHT_GREY	= $0C
   699 = 0080			BLINK	= $80
   700
   701 				.endl							; UNIT CRT
   702
   703 23F3			.local	MUSIC_PLAY					; PROCEDURE | ASSEMBLER | INLINE
   704
   705 					.MACRO m@INLINE
   706 				
   707 				; -------------------  ASM Block 00000065  -------------------
   708 				
   709 				  sei
   710 				  txa \ pha
   711 				  jsr M_PLAY
   712 				  pla \ tax  
   713 				  cli
   714 				
   715 					.ENDM
   716 23F3			@exit
   717 				.endl
   718
   719 23F3			.local	MUSIC_INIT					; PROCEDURE | ASSEMBLER | INLINE
   720
   721 					.MACRO m@INLINE
   722 				
   723 				; -------------------  ASM Block 00000066  -------------------
   724 				
   725 				  txa \ pha
   726 				  jsr M_INIT
   727 				  pla \ tax
   728 				
   729 					.ENDM
   730 23F3			@exit
   731 				.endl
   732
   733 23F3			.local	RESET_SYSTEM					; PROCEDURE | ASSEMBLER | INLINE
   734
   735 					.MACRO m@INLINE
   736 				
   737 				; -------------------  ASM Block 00000067  -------------------
   738 				
   739 				  jmp (RESET_VECTOR)
   740 				
   741 					.ENDM
   742 23F3			@exit
   743 				.endl
   744
   745 23F3			.local	PREPARE_NEW_MUSIC				; PROCEDURE | INLINE
   746
   747 					.MACRO m@INLINE
   748 				
   749 				; optimize OK (main.pas), line = 85
   750 				
   751 					lda #$00
   752 					sta SYSTEM.FILLBYTE_0145.A
   753 					lda #$90
   754 					sta SYSTEM.FILLBYTE_0145.A+1
   755 					lda #$00
   756 					sta SYSTEM.FILLBYTE_0145.COUNT
   757 					lda #$10
   758 					sta SYSTEM.FILLBYTE_0145.COUNT+1
   759 					lda #$00
   760 					sta SYSTEM.FILLBYTE_0145.VALUE
   761 					.local +MAIN.SYSTEM.FILLBYTE_0145
   762 					m@INLINE
   763 					.endl
   764 				
   765 				; optimize OK (main.pas), line = 86
   766 				
   767 					lda MUSIC_INDEX
   768 					asl @
   769 					tay
   770 					lda adr.ZAKS,y
   771 					sta APLIB.UNAPL_0171.INPUTPOINTER
   772 					lda adr.ZAKS+1,y
   773 					sta APLIB.UNAPL_0171.INPUTPOINTER+1
   774 					lda #$00
   775 					sta APLIB.UNAPL_0171.OUTPUTPOINTER
   776 					lda #$90
   777 					sta APLIB.UNAPL_0171.OUTPUTPOINTER+1
   778 					jsr APLIB.UNAPL_0171
   779 				
   780 				; optimize FAIL ('m@INLINE', main.pas), line = 88
   781 				
   782 					.local +MAIN.MUSIC_INIT
   783 					m@INLINE
   784 					.endl
   785 					.ENDM
   786 23F3			@exit
   787 				.endl
   788
   789 23F3			.local	SID_OFF						; PROCEDURE | INLINE
   790
   791 					.MACRO m@INLINE
   792 				
   793 				; optimize OK (main.pas), line = 93
   794 				
   795 					lda #$00
   796 					ldy #$18
   797 					sta:rpl $D500,y-
   798 					.ENDM
   799 23F3			@exit
   800 				.endl
   801
   802 23F3			.local	MAIN_LOOP					; PROCEDURE
   803
   804 				; --- RepeatUntilProlog
   805 23F3			l_019D
   806
   807 				; optimize FAIL ('m@INLINE', main.pas), line = 101
   808
   809 23F3				.local +MAIN.PREPARE_NEW_MUSIC
   810 23F3				m@INLINE
Macro: MAIN.PREPARE_NEW_MUSIC.M@INLINE [Source: main.a65]
     4 23F3 A9 00			lda #$00
     5 23F5 85 88			sta SYSTEM.FILLBYTE_0145.A
     6 23F7 A9 90			lda #$90
     7 23F9 85 89			sta SYSTEM.FILLBYTE_0145.A+1
     8 23FB A9 00			lda #$00
     9 23FD 85 8C			sta SYSTEM.FILLBYTE_0145.COUNT
    10 23FF A9 10			lda #$10
    11 2401 85 8D			sta SYSTEM.FILLBYTE_0145.COUNT+1
    12 2403 A9 00			lda #$00
    13 2405 85 84			sta SYSTEM.FILLBYTE_0145.VALUE
     4 2407 20 49 21			jsr @fill
Source: main.a65
    20 240A AD 34 25			lda MUSIC_INDEX
    21 240D 0A				asl @
    22 240E A8				tay
    23 240F B9 14 21			lda adr.ZAKS,y
    24 2412 8D 2D 25			sta APLIB.UNAPL_0171.INPUTPOINTER
    25 2415 B9 15 21			lda adr.ZAKS+1,y
    26 2418 8D 2E 25			sta APLIB.UNAPL_0171.INPUTPOINTER+1
    27 241B A9 00			lda #$00
    28 241D 8D 2F 25			sta APLIB.UNAPL_0171.OUTPUTPOINTER
    29 2420 A9 90			lda #$90
    30 2422 8D 30 25			sta APLIB.UNAPL_0171.OUTPUTPOINTER+1
    31 2425 20 A8 22			jsr APLIB.UNAPL_0171
     4 2428 8A			  TXA 
     4 2429 48			 PHA
     5 242A 20 48 90		  jsr M_INIT
     6 				  pla \ tax
     6 242D 68			  PLA 
     6 242E AA			 TAX
Source: main.a65
Source: main.a65
   811 					.endl
   812
   813 				; optimize FAIL ('@print', main.pas), line = 103
   814
   815 					@printSTRING #CODEORIGIN+$0099
   815 				 LDY> CODEORIGIN+$0099\ LDA< CODEORIGIN+$0099\ JSR @PRINTSTRING
   815 242F A0 20		 LDY> CODEORIGIN+$0099
   815 2431 A9 99		 LDA< CODEORIGIN+$0099
   815 2433 20 9F 21		 JSR @PRINTSTRING
   816 2436 E8				inx
   817 2437 A0 00			ldy #$00
   818 2439 94 C4			sty :STACKORIGIN+STACKWIDTH*3,x
   819 243B AD 34 25			lda MUSIC_INDEX
   820 243E 18 69 01			add #$01
   821 2441 95 94			sta :STACKORIGIN,x
   822 2443 A9 00			lda #$00
   823 2445 69 00			adc #$00
   824 2447 95 A4			sta :STACKORIGIN+STACKWIDTH,x
   825 2449 90 01			scc
   826 244B C8				iny
   827 244C 94 B4			sty :STACKORIGIN+STACKWIDTH*2,x
   828 244E 20 CE 21			jsr @printCARD
   829 2451 CA				dex
   830 					@print #$20
   830 				 LDY# $20\ JSR @PRINT
   830 2452 A0 20		 LDY# $20
   830 2454 20 96 21		 JSR @PRINT
   831 2457 E8				inx
   832 2458 AD 34 25			lda MUSIC_INDEX
   833 245B 0A				asl @
   834 245C A8				tay
   835 245D B9 02 21			lda adr.NAMES,y
   836 2460 95 94			sta :STACKORIGIN,x
   837 2462 B9 03 21			lda adr.NAMES+1,y
   838 2465 95 A4			sta :STACKORIGIN+STACKWIDTH,x
   839 2467 B5 94			lda :STACKORIGIN,x
   840 2469 B4 A4			ldy :STACKORIGIN+STACKWIDTH,x
   841 246B 20 9F 21			jsr @printSTRING
   842 246E CA				dex
   843 246F 20 91 21			@printEOL
   844
   845 				; --- RepeatUntilProlog
   846 2472			l_01B7
   847
   848 				; --- RepeatUntilProlog
   849 2472			l_01B8
   850
   851 				; optimize OK (main.pas), line = 106
   852
   853 2472 AD 0B D4			lda +ATARI.VCOUNT
   854 2475 C9 10			cmp #$10
   855 2477 D0 F9			jne l_01B8
   856
   857 				; optimize OK (main.pas), line = 107
   858
   859 2479 A9 0E			lda #$0E
   860 247B 8D 1A D0			sta ATARI.COLBK
   861
   862 				; optimize FAIL ('m@INLINE', main.pas), line = 109
   863
   864 247E				.local +MAIN.MUSIC_PLAY
   865 247E				m@INLINE
Macro: MAIN.MUSIC_PLAY.M@INLINE [Source: main.a65]
     4 247E 78			  sei
     5 				  txa \ pha
     5 247F 8A			  TXA 
     5 2480 48			 PHA
     6 2481 20 21 90		  jsr M_PLAY
     7 				  pla \ tax  
     7 2484 68			  PLA 
     7 2485 AA			 TAX  
     8 2486 58			  cli
Source: main.a65
   866 					.endl
   867
   868 				; optimize OK (main.pas), line = 111
   869
   870 2487 A9 00			lda #$00
   871 2489 8D 1A D0			sta ATARI.COLBK
   872
   873 				; optimize FAIL ('CRT.KEYPRESSED', main.pas), line = 112
   874
   875 248C 20 E5 23			jsr CRT.KEYPRESSED
   876 248F AD 33 25			lda CRT.KEYPRESSED.RESULT
   877 2492 F0 DE			jeq l_01B7
   878
   879 				; optimize FAIL ('CRT.READKEY', main.pas), line = 114
   880
   881 2494 20 DE 23			jsr CRT.READKEY
   882 2497 AD 32 25 95 95		mva CRT.READKEY.RESULT :STACKORIGIN+1,x
   883
   884 				; optimize FAIL ('m@INLINE', main.pas), line = 116
   885
   886 249C				.local +MAIN.SID_OFF
   887 249C				m@INLINE
Macro: MAIN.SID_OFF.M@INLINE [Source: main.a65]
     4 249C A9 00			lda #$00
     5 249E A0 18			ldy #$18
     6 24A0 99 00 D5 88 10 FA		sta:rpl $D500,y-
Source: main.a65
   888 					.endl
   889
   890 				; optimize FAIL (0, main.pas), line = 118
   891
   892 24A6 EE 34 25			inc MUSIC_INDEX
   893
   894 				; optimize OK (main.pas), line = 119
   895
   896 24A9 AD 34 25			lda MUSIC_INDEX
   897 24AC C9 09			cmp #$09
   898 24AE B0 03 4C F3 23		jcc l_019D
   899 24B3			@exit
   900 					.ifdef @new
   901 					lda <@VarData
   902 					sta :ztmp
   903 					lda >@VarData
   904 					ldy #@VarDataSize-1
   905 					jmp @FreeMem
   906 					els
   907 24B3 60				rts						; ret
   908 					eif
   909 				.endl
   910 24B4			l_0109
   911
   912 				; optimize FAIL ('CRT.CLRSCR', main.pas), line = 125
   913
   914 24B4 20 D8 23			jsr CRT.CLRSCR
   915
   916 				; optimize FAIL ('@print', main.pas), line = 127
   917
   918 					@printSTRING #CODEORIGIN+$009E
   918 				 LDY> CODEORIGIN+$009E\ LDA< CODEORIGIN+$009E\ JSR @PRINTSTRING
   918 24B7 A0 20		 LDY> CODEORIGIN+$009E
   918 24B9 A9 9E		 LDA< CODEORIGIN+$009E
   918 24BB 20 9F 21		 JSR @PRINTSTRING
   919 24BE 20 91 21			@printEOL
   920
   921 				; optimize FAIL ('@print', main.pas), line = 128
   922
   923 24C1 20 91 21			@printEOL
   924
   925 				; optimize FAIL ('@print', main.pas), line = 129
   926
   927 					@printSTRING #CODEORIGIN+$00B6
   927 				 LDY> CODEORIGIN+$00B6\ LDA< CODEORIGIN+$00B6\ JSR @PRINTSTRING
   927 24C4 A0 20		 LDY> CODEORIGIN+$00B6
   927 24C6 A9 B6		 LDA< CODEORIGIN+$00B6
   927 24C8 20 9F 21		 JSR @PRINTSTRING
   928 24CB 20 91 21			@printEOL
   929
   930 				; optimize FAIL ('@print', main.pas), line = 130
   931
   932 					@printSTRING #CODEORIGIN+$00D0
   932 				 LDY> CODEORIGIN+$00D0\ LDA< CODEORIGIN+$00D0\ JSR @PRINTSTRING
   932 24CE A0 20		 LDY> CODEORIGIN+$00D0
   932 24D0 A9 D0		 LDA< CODEORIGIN+$00D0
   932 24D2 20 9F 21		 JSR @PRINTSTRING
   933 24D5 20 91 21			@printEOL
   934
   935 				; optimize FAIL ('@print', main.pas), line = 131
   936
   937 24D8 20 91 21			@printEOL
   938
   939 				; optimize FAIL ('@print', main.pas), line = 132
   940
   941 					@printSTRING #CODEORIGIN+$00EC
   941 				 LDY> CODEORIGIN+$00EC\ LDA< CODEORIGIN+$00EC\ JSR @PRINTSTRING
   941 24DB A0 20		 LDY> CODEORIGIN+$00EC
   941 24DD A9 EC		 LDA< CODEORIGIN+$00EC
   941 24DF 20 9F 21		 JSR @PRINTSTRING
   942 24E2 20 91 21			@printEOL
   943
   944 				; optimize FAIL ('@print', main.pas), line = 133
   945
   946 24E5 20 91 21			@printEOL
   947
   948 				; optimize FAIL ('MAIN_LOOP', main.pas), line = 135
   949
   950 24E8 20 F3 23			jsr MAIN_LOOP
   951
   952 				; optimize FAIL ('CRT.CLRSCR', main.pas), line = 137
   953
   954 24EB 20 D8 23			jsr CRT.CLRSCR
   955 					@printSTRING #CODEORIGIN+$00FC
   955 				 LDY> CODEORIGIN+$00FC\ LDA< CODEORIGIN+$00FC\ JSR @PRINTSTRING
   955 24EE A0 20		 LDY> CODEORIGIN+$00FC
   955 24F0 A9 FC		 LDA< CODEORIGIN+$00FC
   955 24F2 20 9F 21		 JSR @PRINTSTRING
   956 24F5 A9 32			lda #$32
   957 24F7 8D 2B 25			sta SYSTEM.PAUSE_0164.N
   958 24FA A9 00			lda #$00
   959 24FC 8D 2C 25			sta SYSTEM.PAUSE_0164.N+1
   960 24FF 20 87 22			jsr SYSTEM.PAUSE_0164
   961
   962 				; optimize FAIL ('m@INLINE', main.pas), line = 139
   963
   964 2502				.local +MAIN.RESET_SYSTEM
   965 2502				m@INLINE
Macro: MAIN.RESET_SYSTEM.M@INLINE [Source: main.a65]
     4 2502 6C FC FF		  jmp (RESET_VECTOR)
Source: main.a65
   966 					.endl
   967
   968 				; ------------------------------------------------------------
   969
   970 = 4300			MUSIC_APL_LONDON	= $4300
   971 = 4900			MUSIC_APL_ART	= $4900
   972 = 5100			MUSIC_APL_BATMANIA	= $5100
   973 = 5800			MUSIC_APL_CONTAXIA	= $5800
   974 = 6000			MUSIC_APL_DOMINATION	= $6000
   975 = 6900			MUSIC_APL_FUNCIE	= $6900
   976 = 7200			MUSIC_APL_CHANCE	= $7200
   977 = 7A00			MUSIC_APL_LOVE	= $7A00
   978 = 8200			MUSIC_APL_PIZZA	= $8200
   979 = 9000			MUSIC	= $9000
   980 = 9048			M_INIT	= $9048
   981 = 9021			M_PLAY	= $9021
   982 = 1000			M_SPACE	= $1000
   983 = 0008			M_COUNTER	= $08
   984 = FFFC			RESET_VECTOR	= $FFFC
   985 = D500			SID_REG_HEAD	= $D500
   986 = 0010			RASTER_START	= $10
   987 = 2102			adr.NAMES	= CODEORIGIN+$0102
   988 2505			.var NAMES	= adr.NAMES .word
   989 = 2114			adr.ZAKS	= CODEORIGIN+$0114
   990 2505			.var ZAKS	= adr.ZAKS .word
   991 = 2534			MUSIC_INDEX	= DATAORIGIN+$0014
   992 2505			@exit
   993
   994 2505 A2 00		@halt	ldx #$00
   995 2507 9A				txs
   996 					.ifdef MAIN.@DEFINES.ROMOFF
   997 					inc portb
   998 					.fi
   999
  1000 2508 A0 01			ldy #$01
  1001
  1002 250A 60				rts
  1003
  1004 				; ------------------------------------------------------------
  1005
  1006 250B 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1007
  1008 				; ------------------------------------------------------------
  1009
  1010 251B			.local	@DEFINES
  1011 251B			ATARI
  1012 				.endl
  1013
  1014 251B			.local	@RESOURCE
  1015 				.endl
  1016
  1017 = 251B 02 21		NAMES
  1017 = 251D 14 21		ZAKS
  1017 				.endl							; MAIN
  1018
  1019 				; ------------------------------------------------------------
  1020 				; ------------------------------------------------------------
  1021
  1022 				.macro	UNITINITIALIZATION
  1023 				
  1024 					.ifdef MAIN.SYSTEM.@UnitInit
  1025 					jsr MAIN.SYSTEM.@UnitInit
  1026 					.fi
  1027 				
  1028 					.ifdef MAIN.ATARI.@UnitInit
  1029 					jsr MAIN.ATARI.@UnitInit
  1030 					.fi
  1031 				
  1032 					.ifdef MAIN.APLIB.@UnitInit
  1033 					jsr MAIN.APLIB.@UnitInit
  1034 					.fi
  1035 				
  1036 					.ifdef MAIN.CRT.@UnitInit
  1037 					jsr MAIN.CRT.@UnitInit
  1038 					.fi
  1039 				.endm
  1040
  1041 				; ------------------------------------------------------------
  1042
  1043 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1044 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1044 				SYSTEM: $2287..$22A7
  1045 					eif
  1046
  1047 					ift .SIZEOF(MAIN.ATARI) > 0
  1048 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1049 					eif
  1050
  1051 					ift .SIZEOF(MAIN.APLIB) > 0
  1052 					.print 'APLIB: ',MAIN.APLIB,'..',MAIN.APLIB+.SIZEOF(MAIN.APLIB)-1
  1052 				APLIB: $22A8..$23D7
  1053 					eif
  1054
  1055 					ift .SIZEOF(MAIN.CRT) > 0
  1056 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1056 				CRT: $23D8..$23F2
  1057 					eif
  1058
  1059 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1059 				CODE: $2000..$251A
  1060
  1061 				; ------------------------------------------------------------
  1062
  1063 251F				.align $0004
  1064
  1065 2520			DATAORIGIN
  1066 2520-2525> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1067
  1068 = 0006			VARINITSIZE	= *-DATAORIGIN
  1069 = 0015			VARDATASIZE	= 21
  1070
  1071 = 2535			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1072
  1073 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1073 				DATA: $2520..$2535
  1074
  1075 02E0-02E1> 5F 22			run START
  1076
  1077 				; ------------------------------------------------------------
  1078
  1079 				.macro	STATICDATA
  1080 				.by  $0F $4C $6F $6E $64 $6F $6E $20  $44 $65 $6D $6F $20 $20 $20 $20  $00 $0F $42 $61 $74 $6D $61 $6E
  1081 				.by  $69 $61 $20 $49 $49 $20 $35 $20  $20 $00 $0F $41 $75 $64 $69 $6F  $20 $41 $72 $74 $20 $20 $20 $20
  1082 				.by  $20 $20 $00 $0F $43 $6F $6E $74  $61 $78 $69 $61 $20 $20 $20 $20  $20 $20 $20 $00 $0F $44 $6F $6D
  1083 				.by  $69 $6E $61 $74 $69 $6F $6E $20  $20 $20 $20 $20 $00 $0F $46 $75  $6E $63 $69 $65 $20 $20 $20 $20
  1084 				.by  $20 $20 $20 $20 $20 $00 $0F $49  $6E $20 $43 $68 $61 $6E $63 $65  $20 $20 $20 $20 $20 $20 $00 $0F
  1085 				.by  $4C $65 $73 $73 $6F $6E $73 $20  $69 $6E $20 $4C $6F $76 $65 $00  $0F $50 $65 $70 $70 $65 $72 $65
  1086 				.by  $64 $20 $50 $69 $7A $7A $61 $20  $00 $03 $4E $6F $2E $00 $16 $45  $78 $70 $65 $63 $74 $69 $6E $67
  1087 				.by  $20 $53 $49 $44 $20 $6F $6E $20  $24 $64 $35 $30 $30 $00 $18 $43  $6F $6D $70 $6F $73 $65 $72 $20
  1088 				.by  $3A $20 $52 $65 $79 $6E $20 $4F  $75 $77 $65 $68 $61 $6E $64 $00  $1A $50 $6C $61 $79 $65 $72 $20
  1089 				.by  $20 $20 $3A $20 $4D $75 $73 $69  $63 $20 $41 $73 $73 $65 $6D $62  $6C $65 $72 $00 $0E $70 $72 $65
  1090 				.by  $73 $73 $20 $73 $70 $61 $63 $65  $2E $2E $2E $00 $04 $42 $59 $45  $21 $00 $00 $20 $11 $20 $22 $20
  1091 				.by  $33 $20 $44 $20 $55 $20 $66 $20  $77 $20 $88 $20 $00 $43 $00 $51  $00 $49 $00 $58 $00 $60 $00 $69
  1092 				.by  $00 $72 $00 $7A $00 $82
  1093 				.endm
  1094
  1095 					end
